service: sla-monitor-store-results-sqsworker

# pin to a specific Serverless version
frameworkVersion: ">=1.2.0 <2.0.0"



provider:
  name: aws
  region: ${env:AWS_REGION, 'us-east-1'}
  runtime: nodejs8.10
  deploymentBucket: ${opt:deployBucket}-${env:AWS_ENV, 'dev'}-${env:AWS_REGION, 'us-east-1'}
  stage: ${env:AWS_ENV, 'dev'}
  logRetentionInDays: 14 # cloudwatch logs
  timeout: 10 # seconds
  versionFunctions: true
  iamRoleStatements:
    -
      Effect: Allow
      Action:
        - sqs:GetQueueUrl
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
      Resource:
        - 'Fn::Join':
          - ':'
          -
            - 'arn:aws:sqs'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'sla-monitor-store-results-${self:provider.stage}-${self:provider.region}'
    -
      Effect: Allow
      Action:
        - cloudwatch:PutMetricData
      Resource: "*"

package:
      exclude:
        - .git/**

functions:
  sla-monitor-store-results-sqsworker:
    name: 'sla-monitor-store-results-sqsworker-${self:provider.stage}'
    handler: index.handler
    environment:
      METRIC_NAMESPACE: ${env:SLAMONITOR_NAMESPACE, 'SLA-Monitor'}
      METRIC_RESOLUTION: 60
      RESULTS_SQS_QUEUE_NAME: sla-monitor-store-results-${self:provider.stage}-${self:provider.region}
      LOG_LEVEL: 'debug'
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - "ProcessSLAMetricsSQSQueue"
              - "Arn"
          batchSize: 10

resources:
  Resources:
    ProcessSLAMetricsSQSQueue:
      Type: AWS::SQS::Queue
      Properties: 
        QueueName: sla-monitor-store-results-${self:provider.stage}-${self:provider.region}
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 30
        MessageRetentionPeriod: 345600 # seconds (4 days)
        RedrivePolicy:
          deadLetterTargetArn: 
            Fn::GetAtt: 
              - "ProcessSLAMetricsSQSQueueDeadletter"
              - "Arn"
          maxReceiveCount: 5
    ProcessSLAMetricsSQSQueuePolicy:
      Type: 'AWS::SQS::QueuePolicy'
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: sqspolicy
          Statement:
            - Sid: SendMessage-To-Queue-From-SNS-Topic
              Effect: Allow
              Principal: "*"
              Action:
                - 'sqs:SendMessage'
              Resource: { "Fn::Join": [":", ["arn:aws:sqs", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "sla-monitor-store-results-${self:provider.stage}-${self:provider.region}" ] ] }
              Condition:
                ArnEquals:
                  aws:SourceArn: { "Fn::Join" : ["", ["arn:aws:sns:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":sla-monitor-result-published-${self:provider.stage}" ] ] }
        Queues:
          - { "Fn::Join" : ["", ["https://sqs.", { "Ref" : "AWS::Region" }, ".amazonaws.com/", { "Ref" : "AWS::AccountId" }, "/", "sla-monitor-store-results-${self:provider.stage}-${self:provider.region}" ] ] }
      DependsOn:
        - ProcessSLAMetricsSQSQueue
    ProcessSLAMetricsSQSQueueDeadletter:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "sla-monitor-store-results-${self:provider.stage}-${self:provider.region}-deadletter"
    ProcessSLAMetricsSNSSubscription:
      DependsOn: ProcessSLAMetricsSQSQueue
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: { "Fn::Join" : [":", ["arn:aws:sqs", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "sla-monitor-store-results-${self:provider.stage}-${self:provider.region}" ] ] }
        Protocol: SQS
        TopicArn: { "Fn::Join" : ["", ["arn:aws:sns:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":sla-monitor-result-published-${self:provider.stage}" ] ] }
